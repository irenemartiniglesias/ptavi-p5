 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:

 ** ¿Cuántos paquetes componen la captura?
   
   En la captura hay 954 paquetes. Se puede comprobar yendo al final de esta y consultando el campo número de secuencia.
   
 ** ¿Cuánto tiempo dura la captura?
 
   La captura dura 56.149345 segundos. Se comprueba consultando el último paquete en el campo "Time".
   
 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
   
   La captura se ha realizado en la máquina 192.168.1.34, porque el flujo de paquetes se inicia en ella. Es una IP privada porque pertenece al la clase C 
   cuyo rango va 192.168.0.0 a 192.168.255.255.


3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.

 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
   
   En el apartado Protocol Hierarchy vemos que es mayor el tráfico UDP, 98.94%, frente al 0.75% TCP. Si es consistente con una aplicacion que transmite en 
   tiempo real, ya que como sabemos UDP es un protocolo que no realiza retransmisiones si se pierden paquetes, por lo que es ideal en una aplicacion de tiempo 
   real, porque no sería demasiado bueno que nos llegase un paquete de hace 1 min.
 
 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
 
  Podemos ver IP (Internet Protocol Version 4), DNS (Domain Name Service), SIP (Session Initiation Protocol), Simple Traversal of UDP Through NAT, RTP (Real-Time
  Transport Protocol), H.261, RTCP (Real-Time Transport Control Protocol), HTTP (Hipertext Transfer Protocol), ICMP (Internet Control Message Protocol) y ARP 
  (Addres Resolution Protocol).
   

4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.

 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
   
   Hay 25 paquetes SIP. Se envian en los siguientes segundos:7.343770, 7.425202, 7.427990, 7.512211, 7.567714, 7.567714, 7.648107, 14.426793, 14.599871, 14.610573,
   16.233522, 16.334756, 16.343704, 16.460741, 38.119195, 38.362649, 38.362673, 38.937875, 39.154151, 39.204022, 39.229683, 55.694378, 55.774638, 55.776662,
   55.859934.
 
 ** Y los paquetes con RTP, ¿cuándo se envían?

   Los paquetes RTP se envian de forma practicamente continua desde el segundo 17 hasta el 38.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.

 ** ¿Qué servicio es el utilizado en estas tramas?
   
   En las primeras tramas se utiliza DNS (Domain Name System). Se utiliza DNS para averiguar la direccion IP de Ekiga.
 
 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
 
   La dirección IP del servidor que ha lanzado Ekiga es 80.58.61.250
 
 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
   
   La direccion que devuelve el servidor de nombres, es decir, la direccion IP de Ekiga es 86.64.162.35
 
 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?
 
   Esto se debe a que DNS utiliza el método de resolución inversa. En nuestro caso nos devuelve 35.162.64.86.in-addr.arpa que significa que la direccion IP de 
   Ekiga es la 86.64.162.35.


6. A continuación, hay más de una docena de tramas TCP/HTTP.

 ** ¿Podrías decir la URL que se está pidiendo?

   Para saber que URL se está pidiendo tengo que ir al paquete HTTP en el que se emplea el método GET (paquete número  8). En el nos vamos a la parte del protocolo 
   HTTP y en él vemos que en el campo Full request URI se devuelve la URL http://ekiga.net/ip/
      
 ** ¿Qué user agent (UA) la está pidiendo?
 
   Para saber que User Agent se le está pidiendo nos vamos a analizar el apartado de HTTP y dentro de el vemos que en eel campo User Agent aparece Ekiga.
   
 ** ¿Qué devuelve el servidor?
 
   Para saber que nos devuelve el servidor tenemos que ir al paquete en el que se envía un 200 OK. Vamos al apartado de HTTP y alli en el campo Line-based 
   text data: text/html vemos que se devuelve una IP. Está IP es la IP pública de la máquina 192.168.1.34 ya que el servidor necesita una ip pública para 
   poder comunicar esa máquina con otras máquinas dentro de esa red.
   la dirección IP pública es: 83.36.48.212.
 
 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?

   Lo que recibimos es una dirección IP pública, concretamente nuestra propia ip publica. Por lo tanto lo que responde el servidor es con la ip pública del cliente
   para que pueda comunicarse en otras redes.

7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.

 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
   
   El protocolo STUN es un protocolo de red que se usa en comunicaciones cliente/servidor y permite saber a clientes NAT su direccion ip pública, el tipo de NAT en
   el que se encuentran y el puerto se Internet asociado con el puerto local a través del NAT. 
   Esta información es usada para configurar una comunicación UDP entre dos hosts que se encuentren tras enrutadores NAT.
   
   En nuestro caso se usa STUN ya que queremos saber la dirección pública de la maquina origen, que se encuentra detrás de un NAT.
   
 ** ¿Estamos tras un NAT?

   Si, porque vemos que es necesario utilizar STUN. 
   
8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.

 ** ¿Qué dirección IP tiene el servidor Registrar?
 
   La dirección IP del servidor Registrar es: 86.64.162.65. Lo sabemos porque la dirección 192.168.1.34 envia la solicitud REGISTER al servidor register.
 
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
 
   Se envía al puerto 5060. Esto se ve en el apartado correspondiente a UDP en el campo Destination port
 
 ** ¿Qué método SIP utiliza el UA para registrarse?
 
   Para saber el método que usa el User Agent, nos vamos al apartado del SIP y en el campo Method encontramos que utiliza el método REGISTER.
 
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
 
   Para saber los métodos que entiende el User Agent nos tenemos que ir al apartado de sip, desplegar el menu mesage header y el menu contacto y dentro de contacto
   ir al campo Allow. Ahi vemos que UA entiende los métodos INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE
   

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:

 ** ¿Se registra con éxito en el primer intento?
    
    No, lo podemos ver el el paquete 50, en el que el servidor le envia al cliente una trama 401 Unathorized. Este mensaje aparecce porque el cliente se tiene que 
    identificar para que el servidor le registre.
 
 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
 
    Sabemos si el registro se ha realizado correctamente cuando el servidor envie una trama 200 OK.
 
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio).
 
    El tamaño del primer paquete es de 523 bytes y el de respuesta del servidor es de 714 bytes. Vemos que en el mensaje del servidor aparece un campo de
    autorización (WWW-Authenticate: Digest
    realm="ekiga.net", nonce="45a439ee7438aaea43ae8c7c2382922187f86c8b", qop="auth"), el campo nonce nos indica que el cliente al recibir la no autorización, para
    poder registrarse necesita
    resolver ese campo.
    El tamaño del paquete del segundo intento es de 712 bytes, donde en el campo Authorization en el apartado Nonce Value:
    "45a439ee7438aaea43ae8c7c2382922187f86c8b" vemos el mismo mensaje que
    nos habia enviado el servidor para resolver si queremos registrarnos y en el apartado Algorithm: md5 y response="5267d4e49d707d4443baefa913e8ff90" vemos que el
    algorimo que usa para
    descifrarlo es el md5 y response es la solución a nonce value.
    
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.

    El tiempo de expiración de la sesión la podemos ver en el segundo paquete de REGISTER en el apartado Expires al final del paquete. El tiempo es de 3600
    segundos.


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado
correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.

 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
 
    En el paquete INVITE podemos ver en el apartado de SIP en el campo Message Header y posteriormente en el campo From vemos que la llamada la ha realizado
    Gregorio Robles cuya direccion SIP es grex@ekiga.net.
 
 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
 
    Lo que contiene el cuerpo de la trama se encuentra en el apartado SIP y en message body. En dicho apartado se describe la información de la sesión como en la
    versión en la que se encuentra,
    el nombre de la sesión. La sesión está descrita en SDP.
 
 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
 
    No, porque en la trama 85 el servidor envía un 407 Proxy Authentication Requiered. Esto significa que el servidor proxy debe autenticarse.
 
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?

    El primer INVITE tiene un tamaño de 982 bytes mientras que el segundo tiene 1181 bytes. En el segundo podemos ver en el apartado de SIP hay un campo de (Proxy
    Authorization: Digest
    username="grex", realm="ekiga.net", nonce="45a439f6ba5f681cd945fb7c40529fd1e0f28a81", uri="sip:500@ekiga.net", algorithm=md5,
    response="9a5627c14a8a433bd308d2ec54777240"). Este cambio se debe a que es necesaria la autenticación del Proxy para poder establecer con éxito la conexión.    
    
11. Una vez conectado, estudia el intercambio de tramas.

 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
 
    H.261, RTP, RTCP y ARP. 
    El protocolo RTP (Real-time Transport Protocol) es un protocolo de nivel de sesión utilizado para la transmisión de información en tiempo real, como por
    ejemplo audio y vídeo en una 
    video-conferencia.
    
    H.261 funciona sobre RTP y permite la compresión de audio, video, videoconferencias.

    El protocolo RTCP (Rel-time Transport Control Protocol) es utilizado para enviar datos de control entre el emisor y receptor de una secuencia RTP. Los paquetes
    RTCP son enviados 
    aproximadamente cada cinco segundos, y contienen datos que ayudan a verificar las condiciones de transmisión en el extremo remoto. 
    
    El protocolo ARP (Address Resolution Protocol) es un protocolo de comunicaciones de la capa de enlace de datos, responsable de encontrar la dirección de
    hardware (Ethernet MAC) que corresponde a una determinada dirección IP. Para ello se envía un paquete (ARP request) a la dirección de difusión de la red
    (broadcast, MAC = FF FF FF FF FF FF) que contiene la dirección IP por la que se pregunta, y se espera a que esa máquina (u otra) responda (ARP reply) con la
    dirección Ethernet que le corresponde. Cada máquina mantiene una caché con las direcciones traducidas para reducir el retardo y la carga. ARP permite a la
    dirección de Internet ser independiente de la dirección Ethernet, pero esto solo funciona si todas las máquinas lo soportan
 
 ** ¿Cuál es el tamaño de paquete de los mismos?
 
    Paquetes H.261 : tamaño variable.
    Paquetes ARP: tamaño de 42 y 60 bytes. 
    Paquetes RTP: tamaño 241 bytes.
    Paquetes RTCP: tamaño 102 bytes.
 
 ** ¿Se utilizan bits de padding?
 
    En ninguno de los protocolos se utilizan bits de relleno. En en apartado Padding aparece False.
 
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
 
    La periodicidad de los paquetes que se envían la podemos comprobar en el campo timestamp.
    Para poder calcular esta peridiocidad tenemos que mirar un paquete G.711, donde podemos ver que se transmite a 64kb/s, además conocemos el timestamp (160), es
    decir, que seremos capaces de enviar 50 paquetes (64000/(8*160)) de 1280 bits (64000/50) por segundo. Es decir, el periodo será 1/50, que es 0.02 segundos.
 
 ** ¿Cuántos bits/segundo estamos enviando?
 
    Esyamos enviando 64 Kb/s, es decir, 64000bits/s.   

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?
 ** ¿Cuántos paquetes se pierden?
 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?


13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
 ** ¿A qué se debe el cambio tan brusco del jitter?
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?


15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
 ** ¿En qué trama(s)?
 ** ¿Por qué crees que se envía varias veces?


16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
 ** ¿En qué trama sucede esto?
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
 
    No es necesario porque DNS lo que hace es pedir el nombre del dominio, en nuestro caso ya sabemos el nombre: sip:music@iptel.org. STUN se utiliza para averiguar la ip pubblica cuando estamos
    dentras de un NAT. En nuestro caso sabemos nuestra dirección ip pública.
    
 ** ¿Son diferentes el registro y la descripción de la sesión?

    Si, porque el campo allow de nuestra captura es siguiente. Allow: INVITE,ACK,OPTIONS,BYE,CANCEL,SUBSCRIBE,NOTIFY,REFER,MESSAGE,INFO,PING,PRACK

18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:

 ** ¿Cuántos flujos tenemos?
 
    Tenemos 4 flujos, codificados en g.711. Dos de ellos van desde el cliente (yo) a music@iptel.org y otras dos en sentido contrario.
 
 ** ¿Cuál es su periodicidad?
 
    La periodicidad es la misma ya que el codificador es el mismo, G.711. La perioricidad es de 0.02.
 
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
    De ida.
        El máximo valor del delta es: 30.63ms
        El valor medio del jitter es: 3.46ms
        El máximo jitter es: 4.61ms
   
    De vuelta. 
        El máximo valor del delta es: 42.98ms
        El valor medio del jitter es: 0.96ms
        El máximo jitter es: 3.04ms
    
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
 
    
 
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
